#!/usr/bin/env python3

# This script is used to create the REST API documentation.  It executes
# example requests and then prints a markdown documentation to stdout.
#
# Start `blob-testapp`, upload a file with content `a\n`, configure an API key
# for the testing user, and run:
#
#   ./tools/bin/gen-apidoc-nog-blob-blobs >apidoc-blobs.md
#

toc = [
    'getBlob',
    'getContent',
]

md = {}


md['getBlob'] = '''

<!--
DO NOT EDIT.
This file has been automatically generated by gen-apidoc-nog-blob-blobs.
-->

## Get a Blob

```
{method} {path}
```

**Response**

```
Status: {statusCode}
```

```json
{resbody}
```

'''


md['getContent'] = '''

## Get the Blob Content

```
{method} {path}
```

It will respond with a redirect to S3.  The S3 URL will expire after a few
minutes.

**Response**

```
Status: {statusCode}
Location: {location}
```

'''


from copy import copy
from subprocess import check_output
from textwrap import dedent
import hashlib
import json
import os
import random
import re
import requests
import string
import sys

baseUrl = 'http://localhost:3000/api'
apiPath = '/repos'
headers = {'Content-Type': 'application/json'}

fakeBlobId = '3f786850e387550fdab836ed7e6dc881de23001b'  # sha1_hex("a\n")

userName = 'fred'
repoName = 'hello-world'

# `examples` is used to store the HTTP requests in `request()`.  The recorded
# requests are then used when formatting the documentation.
examples = {}


def main():
    getBlob()
    getContent()
    printFullDoc()


def getBlob():
    request(
        key='getBlob',
        method='GET',
        path=apiPath + '/{repoOwner}/{repoName}/db/blobs/{sha1}',
        params={
            'repoOwner': userName,
            'repoName': repoName,
            'sha1': fakeBlobId
        },
        statusCode=200
    )


def getContent():
    key='getContent'
    res = request(
        key=key,
        method='GET',
        path=apiPath + '/{repoOwner}/{repoName}/db/blobs/{sha1}/content',
        params={
            'repoOwner': userName,
            'repoName': repoName,
            'sha1': fakeBlobId
        },
        statusCode=307
    )
    examples[key]["location"] = res.headers["location"]


# Process request and record it in examples.
def request(key, method, statusCode, url=None, path=None, reqbody=None,
        params=None):
    params = params or {}
    if not url:
        url = baseUrl + path.format(**params)
    signedUrl = sign_req(method, url)
    if method == 'GET':
        res = requests.get(signedUrl, headers=headers, allow_redirects=False)
    else:
        raise NotImplementedError(
                "Method '{0}' not implemented.".format(method)
                )
    if res.status_code != statusCode:
        raise_res(res)
    resbody = res.json()
    try:
        data = resbody["data"]
    except KeyError:
        data = None
    examples[key] = {
        'method': method,
        'path': path,
        'url': url,
        'reqbody': reqbody,
        'statusCode': res.status_code,
        'resbody': resbody,
        'data': data
    }
    return res


def printFullDoc():
    for k in toc:
        doc = fmtDoc(k)
        print(doc)


def fmtDoc(key):
    ex = copy(examples[key])
    ex["reqbody"] = stringify(ex["reqbody"])
    ex["resbody"] = stringify(ex["resbody"])
    ex["data"] = stringify(ex["data"])
    # Change Python format fields to Express-style params:
    # `/api/{foo}/db` -> `/api/:foo/db`.
    if ex["path"]:
        ex["path"] = re.sub(r'[{]([^}]+)[}]', r':\1', ex["path"])
    # Remove AWS key details.
    for k in ('reqbody', 'resbody', 'data', 'url', 'location'):
        if k in ex:
            ex[k] = re.sub(r'AK[A-Z0-9]*', r'AKXXXXXXXXXXXXXXXXXX', ex[k])
            ex[k] = re.sub(r'https://[^/]*.amazonaws.com',
                           r'https://some-s3-bucket.amazonaws.com', ex[k])
            ex[k] = re.sub(r'http://localhost:3000', 'https://nog.zib.de',
                           ex[k])
    return dedent(md[key]).format(**ex)


class ApiError(RuntimeError):
    def __init__(self, arg):
        self.arg = arg


def raise_res(res):
    try:
        data = res.json()
    except ValueError:
        data = 'no response JSON.'
    raise ApiError("Unexpected status code {0}: {1}".format(
        res.status_code, data))


def stringify(data):
    return json.dumps(data, indent=2, sort_keys=True)


def sign_req(method, url):
    res = check_output(['../../tools/bin/sign-req', method, url])
    return res.decode('utf-8').rstrip()


def randomdata(length):
    return os.urandom(length)


main()
