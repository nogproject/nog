#!/usr/bin/env python3

"""HTTP server for local nog repositories

Usage:
  NogHTTPServer [<adress> <port>]

Options:
  -h --help     Print help.

# Commands

`NogHTTPServer` expects a `<owner/repo>.json` in the current directory,
which describes a repo from nog2go.

"""

import http.server
import os, sys, io
import json
import time
import html
import nog
from docopt import docopt
import urllib
import posixpath
import markdown

entryCache = nog.EntryCache()
blobCache = nog.BlobCache()


class MyHandler(http.server.SimpleHTTPRequestHandler):
    def __init__(self, request, client_address, server, repository=None):
        super().__init__(request, client_address, server)
        self.repo = repository
        self.tree = None


    def do_GET(self):
        """Serve a GET request."""
        f = self.send_head()
        if f:
            try:
                self.copyfile(f, self.wfile)
            finally:
                f.close()


    def findTree(self, repopath, filepath):

        words = repopath.split('/')
        print('words' , words)
        print('filepath ', filepath)
        print('repopath ', repopath)

        try:
            f = open(filepath, 'rb')
        except OSError:
            print('file not found: ', filepath)
            self.send_error(404, "File not found. Did you start the server "
                                 "in your repo folder?")
            return None

        repoRef = f.read()
        repoInfo = json.loads(repoRef.decode("utf-8"))

        sha1 = repoInfo['master']
        url = repoInfo['url']

        master = entryCache.get(sha1)
        content = entryCache.get(master['tree'])
        tree = nog.Tree(content=content)

        treepath = words[2:]
        print('treepath ', treepath)
        entry = tree
        print(entry.name)

        i = 0
        while i < len(treepath):
            if not treepath[i] == '':
#                print(tree.content)
                for e in entry.entries():
                    content = entryCache.get(e.sha1)
                    if content['name'] == treepath[i]:
                        break
                if e.type == 'tree':
                    entry = nog.Tree(content=content)
                if e.type == 'object':
                    entry = nog.Object(content=content)
                    break
                print(entry.name)
            i += 1

        print("return for listing: ", entry)
        return entry


    def evalNogPath(self, path):
        words = path.split('/')
        repopath, filepath = '', ''
        found = False
        for w in words:
            if not w == '':
                if not found:
                    filepath = filepath + '/' + w
                if '.json' in w:
                    found = True
                if found:
                    repopath = repopath + '/' + w

        return [found, filepath, repopath]


    def list_tree(self, filepath, repopath):

        print('list_tree path ', filepath)

        r = []
        entry = self.findTree(repopath, filepath)

        enc = sys.getfilesystemencoding()

        if entry.type == 'tree':
            title = 'Tree listing for %s' % entry.name
        elif entry.type == 'object':
            title = 'File Content %s' % entry.name

        r.append('<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" '
                 '"http://www.w3.org/TR/html4/strict.dtd">')
        r.append('<html>\n<head>')
        r.append('<meta http-equiv="Content-Type" '
                 'content="text/html; charset=%s">' % enc)
        r.append('<title>%s</title>\n</head>' % title)
        r.append('<body>\n<h1>%s</h1>' % title)
        r.append('<hr>\n<ul>')
        if entry.type == 'tree':
            print('is Tree!')

            for e in entry.entries():
                print('process ', e.sha1)
                try:
                    content = entryCache.get(e.sha1)
                    if e.type == 'tree':
                        entry = nog.Entry('tree', content=content, repo=None)
                        displayname = entry.name + "/"
                        linkname = repopath + '/' + entry.name + "/"
                    if e.type == 'object':
                        entry = nog.Entry('object', content=content, repo=None)
                        displayname = entry.name
                        linkname = repopath + '/' + entry.name + "/"
                    r.append('<li><a href="%s">%s</a></li>'
                            % (urllib.parse.quote(linkname,
                               errors='surrogatepass'),
                               html.escape(displayname)))
                    print('listed ', entry.sha1, entry.name)
                except:
                    print('could not open ', e.sha1, e.type)

        elif entry.type == 'object':
            print('is Object')
            content = entry.content
            if not entry.blob == nog.NULL_SHA1:
                with blobCache.open(entry.blob) as fp:
                    data = fp.read()
                    try:
                        r.append(data.decode('utf-8'))
                    except:
                        pass
            else:
                if '.md' in entry.name:
                    mdContent = markdown.markdown(
                        entry.content['meta']['content'])
                    r.append(mdContent)
                else:
                    try:
                        r.append(json.dumps(entry.content['meta']))
                    except:
                        pass

        r.append('</ul>\n<hr>\n</body>\n</html>\n')
        encoded = '\n'.join(r).encode(enc, 'surrogateescape')
        f = io.BytesIO()
        f.write(encoded)
        f.seek(0)
        self.send_response(200)
        self.send_header("Content-type", "text/html; charset=%s" % enc)
        self.send_header("Content-Length", str(len(encoded)))
        self.end_headers()
        return f


    def list_directory(self, path):
        """Helper to produce a directory listing (absent index.html).

        Return value is either a file object, or None (indicating an
        error).  In either case, the headers are sent, making the
        interface the same as for send_head().

        """

#        print('list_dir path ', path)

        try:
            list = os.listdir(path)
        except OSError:
            self.send_error(404, "No permission to list directory")
            return None
        list.sort(key=lambda a: a.lower())
        r = []
        try:
            displaypath = urllib.parse.unquote(self.path,
                                               errors='surrogatepass')
        except UnicodeDecodeError:
            displaypath = urllib.parse.unquote(path)
        displaypath = html.escape(displaypath)
        enc = sys.getfilesystemencoding()
        title = 'Directory listing for %s' % displaypath
        r.append('<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" '
                 '"http://www.w3.org/TR/html4/strict.dtd">')
        r.append('<html>\n<head>')
        r.append('<meta http-equiv="Content-Type" '
                 'content="text/html; charset=%s">' % enc)
        r.append('<title>%s</title>\n</head>' % title)
        r.append('<body>\n<h1>%s</h1>' % title)
        r.append('<hr>\n<ul>')
        for name in list:
            fullname = os.path.join(path, name)
            displayname = linkname = name
            # Append / for directories or @ for symbolic links
            # Rename nog repos
            if os.path.isdir(fullname):
                displayname = name + "/"
                linkname = name + "/"
            if os.path.islink(fullname):
                displayname = name + "@"
                # Note: a link to a directory displays with @ and links with /
            if name.endswith('.json'):
                linkname = name
                displayname = name.replace(":", "/")
                displayname = displayname.replace(".json", "")
            r.append('<li><a href="%s">%s</a></li>'
                    % (urllib.parse.quote(linkname,
                                          errors='surrogatepass'),
                       html.escape(displayname)))
        r.append('</ul>\n<hr>\n</body>\n</html>\n')
        encoded = '\n'.join(r).encode(enc, 'surrogateescape')
        f = io.BytesIO()
        f.write(encoded)
        f.seek(0)
        self.send_response(200)
        self.send_header("Content-type", "text/html; charset=%s" % enc)
        self.send_header("Content-Length", str(len(encoded)))
        self.end_headers()
        return f


    def send_head(self):
        """Common code for GET and HEAD commands.

        This sends the response code and MIME headers.

        Return value is either a file object (which has to be copied
        to the outputfile by the caller unless the command was HEAD,
        and must be closed by the caller under all circumstances), or
        None, in which case the caller has nothing further to do.

        """
        print('send_head: ', self.path)
        path = self.translate_path(self.path)
        print('send_head: ', path)
        f = None
#        print('path ', path)
        if os.path.isdir(path):
            parts = urllib.parse.urlsplit(self.path)
#            print('parts ', parts)
            if not parts.path.endswith('/'):
                # redirect browser - doing basically what apache does
                self.send_response(301)
                new_parts = (parts[0], parts[1], parts[2] + '/',
                             parts[3], parts[4])
                new_url = urllib.parse.urlunsplit(new_parts)
                self.send_header("Location", new_url)
                self.end_headers()
                return None
            for index in "index.html", "index.htm":
                index = os.path.join(path, index)
                if os.path.exists(index):
                    path = index
                    break
            else:
                return self.list_directory(path)
        else:
            [isNogPath, filepath, repopath] = self.evalNogPath(path)
#            print('SH filepath ', filepath)
#            print('SH repopath ', repopath)

            if isNogPath:
                    return self.list_tree(filepath, repopath)
    
        ctype = self.guess_type(path)
        print('ctype ', ctype)

        try:
            f = open(path, 'rb')
        except OSError:
            self.send_error(404, "File not found")
            return None
        try:
            self.send_response(200)
            self.send_header("Content-type", ctype)
            fs = os.fstat(f.fileno())
            self.send_header("Content-Length", str(fs[6]))
            self.send_header("Last-Modified",
                             self.date_time_string(fs.st_mtime))
            self.end_headers()
            return f
        except:
            f.close()
            raise


    def translate_path(self, path):
        """Translate a /-separated PATH to the local filename syntax.

        Components that mean special things to the local file system
        (e.g. drive or directory names) are ignored.  (XXX They should
        probably be diagnosed.)

        """
        # abandon query parameters
        path = path.split('?',1)[0]
        path = path.split('#',1)[0]
        # Don't forget explicit trailing slash when normalizing. Issue17324
        trailing_slash = path.rstrip().endswith('/')
        try:
            path = urllib.parse.unquote(path, errors='surrogatepass')
        except UnicodeDecodeError:
            path = urllib.parse.unquote(path)
        path = posixpath.normpath(path)
        words = path.split('/')
        words = filter(None, words)
        path = os.getcwd()
        for word in words:
            drive, word = os.path.splitdrive(word)
            head, word = os.path.split(word)
            if word in (os.curdir, os.pardir): continue
            path = os.path.join(path, word)
        if trailing_slash:
            path += '/'
        return path


if __name__ == '__main__':
    args = docopt(__doc__, version='NogHTTPServer 0.0.1')

    if not args['<adress>'] == None :
        opt_adress = args['<adress>']
    else:
        opt_adress = 'localhost'

    if not args['<port>'] == None:
        opt_port = int(args['<port>'])
    else:
        opt_port = 8000

    http.server.HTTPServer.allow_reuse_address = True

    httpd = http.server.HTTPServer((opt_adress, opt_port), MyHandler)
    print(time.asctime(), "Server Starts - %s:%s" % (opt_adress, opt_port))
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass
    httpd.server_close()
    print(time.asctime(), "Server Stops - %s:%s" % (opt_adress, opt_port))
