#!/bin/bash
# vim: sw=4
set -o errexit -o nounset -o noglob -o pipefail

if ! [ -d '/go' ]; then
    echo 'switching to container'
    set -x
    exec docker-compose run --rm godev ./tools/bin/gen-access-actions
fi

spec='tools/lib/gen-access-actions-spec.yml'

main() {
    genAllFsoActions 'packages/nog-fso/all-fso-actions.js'
    genAllFsoActions 'web/packages/nog-fso-authz/all-fso-actions.js'

    genJwtAAToAction 'packages/nog-jwt/jwt-aa-to-action.js'
    genJwtAAToAction 'web/packages/nog-jwt-2/jwt-aa-to-action.js'

    genActionCode 'packages/nog-fso/action-code.js'
    genActionCode 'web/packages/nog-jwt-2/action-code.js'

    genJwtAAToAccessActionGo \
        'backend/internal/grpcjwt/jwt-aa-to-access-action.go'

    genAAGo 'backend/internal/fsoauthz/aa.go'
}

genAllFsoActions() {
    local path="$1"
    echo "    GEN ${path}"
    fmtAllFsoActions >"${path}"
}

genJwtAAToAction() {
    local path="$1"
    echo "    GEN ${path}"
    fmtJwtAAToAction >"${path}"
}

genJwtAAToAccessActionGo() {
    local path="$1"
    echo "    GEN ${path}"
    fmtJwtAAToAccessActionGo >"${path}"
    echo "    GO FMT ${path}"
    go fmt "${path}"
}

genAAGo() {
    local path="$1"
    echo "    GEN ${path}"
    fmtAAGo >"${path}"
    echo "    GO FMT ${path}"
    go fmt "${path}"
}

genActionCode() {
    local path="$1"
    echo "    GEN ${path}"
    fmtActionCode >"${path}"
}

fmtAllFsoActions() {
    cat <<\EOF
// DO NOT EDIT.  Code generated by `gen-access-actions`.

// `AllFsoActions` is a list of all actions that are used to control access to
// fso.
//
// It must be kept in sync with:
//
// ```
// git grep -E 'AA_(FSO|SYS).*='
// git grep -E 'AAFso.*=.*"'
// ```
//
const AllFsoActions = [
EOF

    yq <"${spec}" '.[] | select(.noAll != true) | .action' \
    | sort \
    | sed -e "s/\"/'/g" -e 's/^/  /' -e 's/$/,/'

    cat <<\EOF
];

export {
  AllFsoActions,
};
EOF
}

fmtJwtAAToAction() {
    cat <<\EOF
// DO NOT EDIT.  Code generated by `gen-access-actions`.

const JwtAAToAction = {
EOF
    yq <"${spec}" '.[] | select(.aa != null) | (.action + " " + .aa)' -r \
    | grep -F '*' \
    | while read -r action aa; do
        echo "  '${aa}': '${action}',"
    done \
    | sort

    echo

    yq <"${spec}" '.[] | select(.aa != null) | (.action + " " + .aa)' -r \
    | grep -v -F '*' \
    | while read -r action aa; do
        echo "  ${aa}: '${action}',"
    done \
    | sort

    cat <<\EOF
};

export {
  JwtAAToAction,
};
EOF
}

fmtJwtAAToAccessActionGo() {
    cat <<\EOF
// DO NOT EDIT.  Code generated by `gen-access-actions`.

package grpcjwt

var jwtAAToAccessAction = map[string]string{
EOF
    yq <"${spec}" '.[] | select(.aa != null) | (.action + " " + .aa)' -r \
    | grep -F '*' \
    | while read -r action aa; do
        printf '\t"%s": "%s",\n' "${aa}" "${action}"
    done \
    | sort

    echo

    yq <"${spec}" '.[] | select(.aa != null) | (.action + " " + .aa)' -r \
    | grep -v -F '*' \
    | while read -r action aa; do
        printf '\t"%s": "%s",\n' "${aa}" "${action}"
    done \
    | sort

    cat <<\EOF
}
EOF
}

fmtActionCode() {
    cat <<\EOF
// DO NOT EDIT.  Code generated by `gen-access-actions`.

/* eslint-disable quote-props */

const ActionCode = {
EOF
    yq <"${spec}" '.[] | (.action + " " + .aa)' -r \
    | grep -F '*' \
    | while read -r action aa; do
        if [ -n "${aa}" ]; then
            echo "  '${action}': '${aa}',"
        else
            echo "  '${action}': null,"
        fi
    done \
    | sort

    echo

    yq <"${spec}" '.[] | (.action + " " + .aa)' -r \
    | grep -v -F '*' \
    | while read -r action aa; do
        if [ -n "${aa}" ]; then
            echo "  '${action}': '${aa}',"
        else
            echo "  '${action}': null,"
        fi
    done \
    | sort

    cat <<\EOF
};

export {
  ActionCode,
};
EOF
}

fmtAAGo() {
    cat <<\EOF
// DO NOT EDIT.  Code generated by `gen-access-actions`.

package fsoauthz

// details: name
EOF
    yq <"${spec}" '.[] | select(.go != null) | select(.detail == "name") | (.go + " " + .action)' -r \
    | while read -r go action; do
        printf 'const %s = "%s"\n' "${go}" "${action}"
    done \
    | sort

    cat <<\EOF

// details: path
EOF
    yq <"${spec}" '.[] | select(.go != null) | select(.detail == "path") | (.go + " " + .action)' -r \
    | while read -r go action; do
        printf 'const %s = "%s"\n' "${go}" "${action}"
    done \
    | sort
}

main "$@"
