#!/usr/bin/env python3

from copy import copy, deepcopy
import json
import nog
import os
import random
import string

originName = 'fake_microscope_2015'
destName = 'fake_celltracking-timeseries_2015'


def main():
    origin = nog.openRepo(originName)
    originCommit = origin.getMaster()
    (dest, master) = ensureDestDatalistRepo(destName)

    root = master.tree

    if False:  # Can be enabled to reset the tree.
        root = emptyRootTree()

    if False:  # Can be enabled to try copy variants.
        # Copy tree naively to test copying based on sha1.
        root.append(next(originCommit.tree.entries()))
        # Copy object naively to test copying based on sha1.
        root.append(next(next(originCommit.tree.entries()).entries()))
        # Copy tree with origin info, which expands the content of the copy.
        copyOne(origin, originCommit, '2015-07-05', root)

    for p in ['2015-07-05/*.avi', '2015-07-01/*.avi']:
        dat = copyOne(origin, originCommit, p, root)
        recordOrigin(root, dat)
        recordChangeMeta(dat)
        dat.meta['study'] = 'fake-celltracking'
        dat.meta['analysis'] = 'analysis-workflow-test'
        print(root.sha1, stringify_pretty(root.content))
        print(dat.sha1, stringify_pretty(dat.content))

    master = dest.commitTree(
            subject='Add ' + dat.name, tree=root, parent=master.sha1
        )
    print(master.sha1, stringify_pretty(master.content))


# Copy one entry with origin information.
def copyOne(srcRepo, srcCommit, pathspec, dstTree):
    def resolve(commit, pathspec):
        path = []
        pathspec = pathspec.split('/')
        initial, last = pathspec[:-1], pathspec[-1]
        tree = commit.tree
        for p in initial:
            tree = next(tree.trees(p))
            path.append(tree.name)
        ent = next(tree.entries(last))
        path.append(ent.name)
        return (ent, '/'.join(path))
    ent, path = resolve(srcCommit, pathspec)
    origins = dstTree.meta['datalist'].setdefault('origins', [])
    origins.append({
            'type': ent.type,
            'sha1': ent.sha1,
            'origin': {
                'repoFullName': srcRepo.fullName,
                'refName': 'branches/master',
                'commitId': srcCommit.sha1,
                'namePath': path,
                'sha1': ent.sha1
            }
        })
    ent = deepcopy(ent)
    dstTree.append(ent)
    return ent


# Move the origin record from the tree to the entry in preparation for entry
# changes, which will modify the content id.
def recordOrigin(tree, entry):
    def findOrigin(origins, sha1):
        for idx, o in enumerate(origins):
            if o['sha1'] == sha1:
                return (o, idx)
        raise KeyError('Unknown origin.')

    def findEntry(tree, sha1):
        for e in tree.entries():
            if e.sha1 == sha1:
                return e
        return None

    sha1 = entry.sha1
    origins = tree.meta['datalist'].get('origins', [])
    (oinfo, idx) = findOrigin(origins, sha1)
    history = entry.meta.setdefault('history', [])
    history.insert(0, {'action': 'copiedFrom', 'origin': oinfo['origin']})
    if not findEntry(tree, sha1):
        origins.pop(idx)


def recordChangeMeta(entry):
    history = entry.meta.setdefault('history', [])
    history.insert(0, {
            'action': 'changedMeta',
            'prev': omit(entry.meta, 'history')
        })


def omit(d, *args):
    d = copy(d)
    for k in args:
        del d[k]
    return d


# Either create a repo with datalist root tree; or check that the existing repo
# has a datalist root tree.
def ensureDestDatalistRepo(repo):
    try:
        remote = nog.openRepo(repo)
        master = remote.getMaster()
    except RuntimeError as err:
        if 'ERR_REPO_MISSING' not in str(err):
            raise
        remote = nog.createRepo(repo)
        master = remote.getMaster()
        root = emptyRootTree()
        master = remote.commitTree(
                subject='Create datalist', tree=root, parent=master.sha1)

    root = master.tree
    if 'datalist' not in root.meta:
        raise RuntimeError('Root tree without `meta.datalist`.')
    return (remote, master)


def emptyRootTree():
    root = nog.Tree()
    root.name = 'Chemotaxis timeseries'
    root.meta['datalist'] = {}
    return root


def randomword(length):
    chars = (random.choice(string.ascii_lowercase) for i in range(length))
    return ''.join(chars)


def stringify_pretty(d):
    return json.dumps(d, sort_keys=True, ensure_ascii=False, indent=2) + '\n'


main()
